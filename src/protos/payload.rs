// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payload.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct SimpleSupplyPayload {
    // message fields
    pub action: SimpleSupplyPayload_Action,
    pub create_agent: ::protobuf::SingularPtrField<CreateAgentAction>,
    pub create_record: ::protobuf::SingularPtrField<CreateRecordAction>,
    pub update_record: ::protobuf::SingularPtrField<UpdateRecordAction>,
    pub transfer_record: ::protobuf::SingularPtrField<TransferRecordAction>,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleSupplyPayload {
    fn default() -> &'a SimpleSupplyPayload {
        <SimpleSupplyPayload as ::protobuf::Message>::default_instance()
    }
}

impl SimpleSupplyPayload {
    pub fn new() -> SimpleSupplyPayload {
        ::std::default::Default::default()
    }

    // .SimpleSupplyPayload.Action action = 1;


    pub fn get_action(&self) -> SimpleSupplyPayload_Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = SimpleSupplyPayload_Action::CREATE_AGENT;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: SimpleSupplyPayload_Action) {
        self.action = v;
    }

    // .CreateAgentAction create_agent = 2;


    pub fn get_create_agent(&self) -> &CreateAgentAction {
        self.create_agent.as_ref().unwrap_or_else(|| CreateAgentAction::default_instance())
    }
    pub fn clear_create_agent(&mut self) {
        self.create_agent.clear();
    }

    pub fn has_create_agent(&self) -> bool {
        self.create_agent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_agent(&mut self, v: CreateAgentAction) {
        self.create_agent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_agent(&mut self) -> &mut CreateAgentAction {
        if self.create_agent.is_none() {
            self.create_agent.set_default();
        }
        self.create_agent.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_agent(&mut self) -> CreateAgentAction {
        self.create_agent.take().unwrap_or_else(|| CreateAgentAction::new())
    }

    // .CreateRecordAction create_record = 3;


    pub fn get_create_record(&self) -> &CreateRecordAction {
        self.create_record.as_ref().unwrap_or_else(|| CreateRecordAction::default_instance())
    }
    pub fn clear_create_record(&mut self) {
        self.create_record.clear();
    }

    pub fn has_create_record(&self) -> bool {
        self.create_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_record(&mut self, v: CreateRecordAction) {
        self.create_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_record(&mut self) -> &mut CreateRecordAction {
        if self.create_record.is_none() {
            self.create_record.set_default();
        }
        self.create_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_record(&mut self) -> CreateRecordAction {
        self.create_record.take().unwrap_or_else(|| CreateRecordAction::new())
    }

    // .UpdateRecordAction update_record = 4;


    pub fn get_update_record(&self) -> &UpdateRecordAction {
        self.update_record.as_ref().unwrap_or_else(|| UpdateRecordAction::default_instance())
    }
    pub fn clear_update_record(&mut self) {
        self.update_record.clear();
    }

    pub fn has_update_record(&self) -> bool {
        self.update_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_record(&mut self, v: UpdateRecordAction) {
        self.update_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_record(&mut self) -> &mut UpdateRecordAction {
        if self.update_record.is_none() {
            self.update_record.set_default();
        }
        self.update_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_record(&mut self) -> UpdateRecordAction {
        self.update_record.take().unwrap_or_else(|| UpdateRecordAction::new())
    }

    // .TransferRecordAction transfer_record = 5;


    pub fn get_transfer_record(&self) -> &TransferRecordAction {
        self.transfer_record.as_ref().unwrap_or_else(|| TransferRecordAction::default_instance())
    }
    pub fn clear_transfer_record(&mut self) {
        self.transfer_record.clear();
    }

    pub fn has_transfer_record(&self) -> bool {
        self.transfer_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transfer_record(&mut self, v: TransferRecordAction) {
        self.transfer_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transfer_record(&mut self) -> &mut TransferRecordAction {
        if self.transfer_record.is_none() {
            self.transfer_record.set_default();
        }
        self.transfer_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_transfer_record(&mut self) -> TransferRecordAction {
        self.transfer_record.take().unwrap_or_else(|| TransferRecordAction::new())
    }

    // uint64 timestamp = 6;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SimpleSupplyPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.create_agent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transfer_record {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_agent)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_record)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_record)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transfer_record)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != SimpleSupplyPayload_Action::CREATE_AGENT {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        if let Some(ref v) = self.create_agent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transfer_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action != SimpleSupplyPayload_Action::CREATE_AGENT {
            os.write_enum(1, self.action.value())?;
        }
        if let Some(ref v) = self.create_agent.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_record.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_record.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transfer_record.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(6, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleSupplyPayload {
        SimpleSupplyPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SimpleSupplyPayload_Action>>(
                    "action",
                    |m: &SimpleSupplyPayload| { &m.action },
                    |m: &mut SimpleSupplyPayload| { &mut m.action },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAgentAction>>(
                    "create_agent",
                    |m: &SimpleSupplyPayload| { &m.create_agent },
                    |m: &mut SimpleSupplyPayload| { &mut m.create_agent },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateRecordAction>>(
                    "create_record",
                    |m: &SimpleSupplyPayload| { &m.create_record },
                    |m: &mut SimpleSupplyPayload| { &mut m.create_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdateRecordAction>>(
                    "update_record",
                    |m: &SimpleSupplyPayload| { &m.update_record },
                    |m: &mut SimpleSupplyPayload| { &mut m.update_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransferRecordAction>>(
                    "transfer_record",
                    |m: &SimpleSupplyPayload| { &m.transfer_record },
                    |m: &mut SimpleSupplyPayload| { &mut m.transfer_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &SimpleSupplyPayload| { &m.timestamp },
                    |m: &mut SimpleSupplyPayload| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SimpleSupplyPayload>(
                    "SimpleSupplyPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SimpleSupplyPayload {
        static mut instance: ::protobuf::lazy::Lazy<SimpleSupplyPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SimpleSupplyPayload,
        };
        unsafe {
            instance.get(SimpleSupplyPayload::new)
        }
    }
}

impl ::protobuf::Clear for SimpleSupplyPayload {
    fn clear(&mut self) {
        self.action = SimpleSupplyPayload_Action::CREATE_AGENT;
        self.create_agent.clear();
        self.create_record.clear();
        self.update_record.clear();
        self.transfer_record.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleSupplyPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleSupplyPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SimpleSupplyPayload_Action {
    CREATE_AGENT = 0,
    CREATE_RECORD = 1,
    UPDATE_RECORD = 2,
    TRANSFER_RECORD = 3,
}

impl ::protobuf::ProtobufEnum for SimpleSupplyPayload_Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SimpleSupplyPayload_Action> {
        match value {
            0 => ::std::option::Option::Some(SimpleSupplyPayload_Action::CREATE_AGENT),
            1 => ::std::option::Option::Some(SimpleSupplyPayload_Action::CREATE_RECORD),
            2 => ::std::option::Option::Some(SimpleSupplyPayload_Action::UPDATE_RECORD),
            3 => ::std::option::Option::Some(SimpleSupplyPayload_Action::TRANSFER_RECORD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SimpleSupplyPayload_Action] = &[
            SimpleSupplyPayload_Action::CREATE_AGENT,
            SimpleSupplyPayload_Action::CREATE_RECORD,
            SimpleSupplyPayload_Action::UPDATE_RECORD,
            SimpleSupplyPayload_Action::TRANSFER_RECORD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SimpleSupplyPayload_Action", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SimpleSupplyPayload_Action {
}

impl ::std::default::Default for SimpleSupplyPayload_Action {
    fn default() -> Self {
        SimpleSupplyPayload_Action::CREATE_AGENT
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleSupplyPayload_Action {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAgentAction {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAgentAction {
    fn default() -> &'a CreateAgentAction {
        <CreateAgentAction as ::protobuf::Message>::default_instance()
    }
}

impl CreateAgentAction {
    pub fn new() -> CreateAgentAction {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateAgentAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAgentAction {
        CreateAgentAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CreateAgentAction| { &m.name },
                    |m: &mut CreateAgentAction| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAgentAction>(
                    "CreateAgentAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAgentAction {
        static mut instance: ::protobuf::lazy::Lazy<CreateAgentAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAgentAction,
        };
        unsafe {
            instance.get(CreateAgentAction::new)
        }
    }
}

impl ::protobuf::Clear for CreateAgentAction {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAgentAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAgentAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRecordAction {
    // message fields
    pub record_id: ::std::string::String,
    pub latitude: i64,
    pub longitude: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRecordAction {
    fn default() -> &'a CreateRecordAction {
        <CreateRecordAction as ::protobuf::Message>::default_instance()
    }
}

impl CreateRecordAction {
    pub fn new() -> CreateRecordAction {
        ::std::default::Default::default()
    }

    // string record_id = 1;


    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }
    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    // sint64 latitude = 2;


    pub fn get_latitude(&self) -> i64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: i64) {
        self.latitude = v;
    }

    // sint64 longitude = 3;


    pub fn get_longitude(&self) -> i64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: i64) {
        self.longitude = v;
    }
}

impl ::protobuf::Message for CreateRecordAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.latitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.longitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if self.latitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.latitude);
        }
        if self.longitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, self.longitude);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if self.latitude != 0 {
            os.write_sint64(2, self.latitude)?;
        }
        if self.longitude != 0 {
            os.write_sint64(3, self.longitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRecordAction {
        CreateRecordAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &CreateRecordAction| { &m.record_id },
                    |m: &mut CreateRecordAction| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "latitude",
                    |m: &CreateRecordAction| { &m.latitude },
                    |m: &mut CreateRecordAction| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "longitude",
                    |m: &CreateRecordAction| { &m.longitude },
                    |m: &mut CreateRecordAction| { &mut m.longitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRecordAction>(
                    "CreateRecordAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRecordAction {
        static mut instance: ::protobuf::lazy::Lazy<CreateRecordAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRecordAction,
        };
        unsafe {
            instance.get(CreateRecordAction::new)
        }
    }
}

impl ::protobuf::Clear for CreateRecordAction {
    fn clear(&mut self) {
        self.record_id.clear();
        self.latitude = 0;
        self.longitude = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRecordAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRecordAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateRecordAction {
    // message fields
    pub record_id: ::std::string::String,
    pub latitude: i64,
    pub longitude: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateRecordAction {
    fn default() -> &'a UpdateRecordAction {
        <UpdateRecordAction as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRecordAction {
    pub fn new() -> UpdateRecordAction {
        ::std::default::Default::default()
    }

    // string record_id = 1;


    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }
    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    // sint64 latitude = 2;


    pub fn get_latitude(&self) -> i64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: i64) {
        self.latitude = v;
    }

    // sint64 longitude = 3;


    pub fn get_longitude(&self) -> i64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: i64) {
        self.longitude = v;
    }
}

impl ::protobuf::Message for UpdateRecordAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.latitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.longitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if self.latitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.latitude);
        }
        if self.longitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, self.longitude);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if self.latitude != 0 {
            os.write_sint64(2, self.latitude)?;
        }
        if self.longitude != 0 {
            os.write_sint64(3, self.longitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateRecordAction {
        UpdateRecordAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &UpdateRecordAction| { &m.record_id },
                    |m: &mut UpdateRecordAction| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "latitude",
                    |m: &UpdateRecordAction| { &m.latitude },
                    |m: &mut UpdateRecordAction| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "longitude",
                    |m: &UpdateRecordAction| { &m.longitude },
                    |m: &mut UpdateRecordAction| { &mut m.longitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateRecordAction>(
                    "UpdateRecordAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateRecordAction {
        static mut instance: ::protobuf::lazy::Lazy<UpdateRecordAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateRecordAction,
        };
        unsafe {
            instance.get(UpdateRecordAction::new)
        }
    }
}

impl ::protobuf::Clear for UpdateRecordAction {
    fn clear(&mut self) {
        self.record_id.clear();
        self.latitude = 0;
        self.longitude = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateRecordAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRecordAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransferRecordAction {
    // message fields
    pub record_id: ::std::string::String,
    pub receiving_agent: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransferRecordAction {
    fn default() -> &'a TransferRecordAction {
        <TransferRecordAction as ::protobuf::Message>::default_instance()
    }
}

impl TransferRecordAction {
    pub fn new() -> TransferRecordAction {
        ::std::default::Default::default()
    }

    // string record_id = 1;


    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }
    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    // string receiving_agent = 2;


    pub fn get_receiving_agent(&self) -> &str {
        &self.receiving_agent
    }
    pub fn clear_receiving_agent(&mut self) {
        self.receiving_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiving_agent(&mut self, v: ::std::string::String) {
        self.receiving_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiving_agent(&mut self) -> &mut ::std::string::String {
        &mut self.receiving_agent
    }

    // Take field
    pub fn take_receiving_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiving_agent, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TransferRecordAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiving_agent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if !self.receiving_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.receiving_agent);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if !self.receiving_agent.is_empty() {
            os.write_string(2, &self.receiving_agent)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransferRecordAction {
        TransferRecordAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &TransferRecordAction| { &m.record_id },
                    |m: &mut TransferRecordAction| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiving_agent",
                    |m: &TransferRecordAction| { &m.receiving_agent },
                    |m: &mut TransferRecordAction| { &mut m.receiving_agent },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransferRecordAction>(
                    "TransferRecordAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransferRecordAction {
        static mut instance: ::protobuf::lazy::Lazy<TransferRecordAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransferRecordAction,
        };
        unsafe {
            instance.get(TransferRecordAction::new)
        }
    }
}

impl ::protobuf::Clear for TransferRecordAction {
    fn clear(&mut self) {
        self.record_id.clear();
        self.receiving_agent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransferRecordAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferRecordAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\"\xaa\x03\n\x13SimpleSupplyPayload\x123\n\x06action\
    \x18\x01\x20\x01(\x0e2\x1b.SimpleSupplyPayload.ActionR\x06action\x125\n\
    \x0ccreate_agent\x18\x02\x20\x01(\x0b2\x12.CreateAgentActionR\x0bcreateA\
    gent\x128\n\rcreate_record\x18\x03\x20\x01(\x0b2\x13.CreateRecordActionR\
    \x0ccreateRecord\x128\n\rupdate_record\x18\x04\x20\x01(\x0b2\x13.UpdateR\
    ecordActionR\x0cupdateRecord\x12>\n\x0ftransfer_record\x18\x05\x20\x01(\
    \x0b2\x15.TransferRecordActionR\x0etransferRecord\x12\x1c\n\ttimestamp\
    \x18\x06\x20\x01(\x04R\ttimestamp\"U\n\x06Action\x12\x10\n\x0cCREATE_AGE\
    NT\x10\0\x12\x11\n\rCREATE_RECORD\x10\x01\x12\x11\n\rUPDATE_RECORD\x10\
    \x02\x12\x13\n\x0fTRANSFER_RECORD\x10\x03\"'\n\x11CreateAgentAction\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"k\n\x12CreateRecordAction\
    \x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\x12\x1a\n\x08latit\
    ude\x18\x02\x20\x01(\x12R\x08latitude\x12\x1c\n\tlongitude\x18\x03\x20\
    \x01(\x12R\tlongitude\"k\n\x12UpdateRecordAction\x12\x1b\n\trecord_id\
    \x18\x01\x20\x01(\tR\x08recordId\x12\x1a\n\x08latitude\x18\x02\x20\x01(\
    \x12R\x08latitude\x12\x1c\n\tlongitude\x18\x03\x20\x01(\x12R\tlongitude\
    \"\\\n\x14TransferRecordAction\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\
    \x08recordId\x12'\n\x0freceiving_agent\x18\x02\x20\x01(\tR\x0ereceivingA\
    gentb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
